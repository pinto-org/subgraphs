# This same entity schema is intended for use across the subgraphs
type Version @entity {
  "= 'subgraph'"
  id: ID!
  "= 'beanstalk'"
  subgraphName: String!
  "Verison number of the subgraph"
  versionNumber: String!
  "Address of Beanstalk protocol"
  protocolAddress: Bytes!
  "Which blockchain is being indexed, i.e. 'ethereum', 'arbitrum', etc."
  chain: String!
}

enum TradeType {
  ADD_LIQUIDITY
  REMOVE_LIQUIDITY
  SWAP
}

enum TradeEventType {
  AddLiquidity
  Sync
  RemoveLiquidity
  RemoveLiquidityOneToken
  Swap
  Shift
}

type Account @entity {
  id: Bytes!
  trades: [Trade!]! @derivedFrom(field: "account")
}

type Token @entity {
  "Smart contract address of the token"
  id: Bytes!
  "Name of the token, mirrored from the smart contract"
  name: String!
  "Symbol of the token, mirrored from the smart contract"
  symbol: String!
  "The number of decimal places this token uses, default to 18"
  decimals: Int!
  "Optional field to track the price of a token, mostly for caching purposes"
  lastPriceUSD: BigDecimal!
  "Optional field to track the block number of the last token price"
  lastPriceBlockNumber: BigInt!
}

type WellUpgradeHistory @entity {
  "{Well Address}-{Upgrade Index} "
  id: ID!
  "The well that this upgrade history is for"
  well: Well!
  "The block this upgrade went into effect"
  effectiveBlock: BigInt!
  "The timestamp this upgrade went into effect"
  effectiveTimestamp: BigInt!
  ##### Datapoints #####
  boredWell: Bytes!
  aquifer: Aquifer!
  implementation: Implementation!
  pumps: [Pump!]!
  pumpData: [Bytes!]!
  wellFunction: WellFunction!
  wellFunctionData: Bytes!
}

type Aquifer @entity {
  "Smart contract address of the aquifer"
  id: Bytes!
  "Wells deployed by this aquifer"
  wells: [Well!]! @derivedFrom(field: "aquifer")
}

type Implementation @entity {
  "Implementation address"
  id: Bytes!
  "Wells deployed with this implementation"
  wells: [Well!]! @derivedFrom(field: "implementation")
}

type WellFunction @entity {
  "Well Function address"
  id: Bytes!
  "Wells associated with this well function"
  wells: [Well!]! @derivedFrom(field: "wellFunction")
}

type Pump @entity {
  "Pump address"
  id: Bytes!
  "Wells associated with this pump"
  wells: [Well!]! @derivedFrom(field: "pumps")
}

type Season @entity {
  "Season number (string)"
  id: ID!
  "Season number (int) "
  season: Int!
  "Timestamp of the start of this season"
  timestamp: BigInt!

  # Snapshots
  beanstalkHourlySnapshots: [BeanstalkHourlySnapshot!]! @derivedFrom(field: "season")
  beanstalkDailySnapshots: [BeanstalkDailySnapshot!]! @derivedFrom(field: "season")
  wellHourlySnapshots: [WellHourlySnapshot!]! @derivedFrom(field: "season")
  wellDailySnapshots: [WellDailySnapshot!]! @derivedFrom(field: "season")
}

# Contains cumulative stats across all of the Beanstalk wells.
type Beanstalk @entity {
  "= 'beanstalk'"
  id: ID!

  "Last season seen from Beanstalk"
  lastSeason: Season!

  "Beanstalk Wells"
  wells: [Well!]!

  "The sum of all liquidity in USD all wells."
  totalLiquidityUSD: BigDecimal!

  "All trade volume occurred, in USD. This includes any net trading activity as a result of add/remove liquidity."
  cumulativeTradeVolumeUSD: BigDecimal!
  "Rolling 24h of cumulativeTradeVolumeUSD"
  rollingDailyTradeVolumeUSD: BigDecimal!
  "Rolling 7d of cumulativeTradeVolumeUSD"
  rollingWeeklyTradeVolumeUSD: BigDecimal!

  "All bean buying volume, including converts. Subset of cumulativeTradeVolumeUSD."
  cumulativeBuyVolumeUSD: BigDecimal!
  "Rolling 24h of cumulativeBuyVolumeUSD"
  rollingDailyBuyVolumeUSD: BigDecimal!
  "Rolling 7d of cumulativeBuyVolumeUSD"
  rollingWeeklyBuyVolumeUSD: BigDecimal!

  "All bean selling volume, including converts. Subset of cumulativeTradeVolumeUSD."
  cumulativeSellVolumeUSD: BigDecimal!
  "Rolling 24h of cumulativeSellVolumeUSD"
  rollingDailySellVolumeUSD: BigDecimal!
  "Rolling 7d of cumulativeSellVolumeUSD"
  rollingWeeklySellVolumeUSD: BigDecimal!

  "All transfer volume occurred, in USD. This includes the full value of tokens transferred in add/remove liquidity."
  cumulativeTransferVolumeUSD: BigDecimal!
  "Rolling 24h of cumulativeTransferVolumeUSD"
  rollingDailyTransferVolumeUSD: BigDecimal!
  "Rolling 7d of cumulativeTransferVolumeUSD"
  rollingWeeklyTransferVolumeUSD: BigDecimal!

  "All bidirectional convert trading volume, in USD. Includes LP->LP converts which are neither up nor down."
  cumulativeConvertVolumeUSD: BigDecimal!
  "Rolling 24h of cumulativeConvertVolumeUSD"
  rollingDailyConvertVolumeUSD: BigDecimal!
  "Rolling 7d of cumulativeConvertVolumeUSD"
  rollingWeeklyConvertVolumeUSD: BigDecimal!

  "All upconvert convert trading volume, in USD. Subset of cumulativeConvertVolumeUSD."
  cumulativeConvertUpVolumeUSD: BigDecimal!
  "Rolling 24h of cumulativeConvertUpVolumeUSD"
  rollingDailyConvertUpVolumeUSD: BigDecimal!
  "Rolling 7d of cumulativeConvertUpVolumeUSD"
  rollingWeeklyConvertUpVolumeUSD: BigDecimal!

  "All downconvert convert trading volume, in USD. Subset of cumulativeConvertVolumeUSD."
  cumulativeConvertDownVolumeUSD: BigDecimal!
  "Rolling 24h of cumulativeConvertDownVolumeUSD"
  rollingDailyConvertDownVolumeUSD: BigDecimal!
  "Rolling 7d of cumulativeConvertDownVolumeUSD"
  rollingWeeklyConvertDownVolumeUSD: BigDecimal!

  "All LP->LP convert trading volume, in USD. Counts values from both Well interactions. A LP->LP convert is defined as a remove liquidity in one Well and add liquidity in another Well. Does not include L2L or AL2L converts which have no Well trading activity. Subset of cumulativeConvertVolumeUSD."
  cumulativeConvertNeutralTradeVolumeUSD: BigDecimal!
  "Rolling 24h of cumulativeConvertNeutralTradeVolumeUSD"
  rollingDailyConvertNeutralTradeVolumeUSD: BigDecimal!
  "Rolling 7d of cumulativeConvertNeutralTradeVolumeUSD"
  rollingWeeklyConvertNeutralTradeVolumeUSD: BigDecimal!

  "All LP->LP convert transfer volume, in USD. Does NOT double count values from both well interactions. A LP->LP convert is defined as a remove liquidity in one Well and add liquidity in another Well. Does not include L2L or AL2L converts which have no Well trading activity. Subset of cumulativeConvertVolumeUSD."
  cumulativeConvertNeutralTransferVolumeUSD: BigDecimal!
  "Rolling 24h of cumulativeConvertNeutralTransferVolumeUSD"
  rollingDailyConvertNeutralTransferVolumeUSD: BigDecimal!
  "Rolling 7d of cumulativeConvertNeutralTransferVolumeUSD"
  rollingWeeklyConvertNeutralTransferVolumeUSD: BigDecimal!

  "Season when the previous hourly snapshot was taken/updated"
  lastHourlySnapshotSeason: Int
  "Day of when the previous daily snapshot was taken/updated"
  lastDailySnapshotDay: Int

  "Timestamp of entity creation"
  createdTimestamp: BigInt!
  "Timestamp of the last time this entity was updated"
  lastUpdateTimestamp: BigInt!
  "Block number of the last time this entity was updated"
  lastUpdateBlockNumber: BigInt!
}

type BeanstalkHourlySnapshot @entity {
  "{Beanstalk ID}-{Season number}"
  id: ID!

  "Season"
  season: Season!

  "Beanstalk Wells"
  wells: [Well!]!

  "The sum of all liquidity in USD all wells."
  totalLiquidityUSD: BigDecimal!
  "Delta of totalLiquidityUSD"
  deltaLiquidityUSD: BigDecimal!

  "All trade volume occurred, in USD. This includes any net trading activity as a result of add/remove liquidity."
  cumulativeTradeVolumeUSD: BigDecimal!
  "Delta of cumulativeTradeVolumeUSD"
  deltaTradeVolumeUSD: BigDecimal!

  "All bean buying volume, including converts."
  cumulativeBuyVolumeUSD: BigDecimal!
  "Delta of cumulativeBuyVolumeUSD"
  deltaBuyVolumeUSD: BigDecimal!

  "All bean selling volume, including converts."
  cumulativeSellVolumeUSD: BigDecimal!
  "Delta of cumulativeSellVolumeUSD"
  deltaSellVolumeUSD: BigDecimal!

  "All transfer volume occurred, in USD. This includes the full value of tokens transferred in add/remove liquidity."
  cumulativeTransferVolumeUSD: BigDecimal!
  "Delta of cumulativeTransferVolumeUSD"
  deltaTransferVolumeUSD: BigDecimal!

  "All bidirectional convert trading volume, in USD. Includes LP->LP converts which are neither up nor down."
  cumulativeConvertVolumeUSD: BigDecimal!
  "Delta of cumulativeConvertVolumeUSD"
  deltaConvertVolumeUSD: BigDecimal!

  "All upconvert convert trading volume, in USD."
  cumulativeConvertUpVolumeUSD: BigDecimal!
  "Delta of cumulativeConvertUpVolumeUSD"
  deltaConvertUpVolumeUSD: BigDecimal!

  "All downconvert convert trading volume, in USD."
  cumulativeConvertDownVolumeUSD: BigDecimal!
  "Delta of cumulativeConvertDownVolumeUSD"
  deltaConvertDownVolumeUSD: BigDecimal!

  "All LP->LP convert trading volume, in USD. Counts values from both Well interactions. A LP->LP convert is defined as a remove liquidity in one Well and add liquidity in another Well. Does not include L2L or AL2L converts which have no Well trading activity."
  cumulativeConvertNeutralTradeVolumeUSD: BigDecimal!
  "Delta of cumulativeConvertNeutralTradeVolumeUSD"
  deltaConvertNeutralTradeVolumeUSD: BigDecimal!

  "All LP->LP convert transfer volume, in USD. Does NOT double count values from both well interactions. A LP->LP convert is defined as a remove liquidity in one Well and add liquidity in another Well. Does not include L2L or AL2L converts which have no Well trading activity."
  cumulativeConvertNeutralTransferVolumeUSD: BigDecimal!
  "Delta of cumulativeConvertNeutralTransferVolumeUSD"
  deltaConvertNeutralTransferVolumeUSD: BigDecimal!

  "Timestamp of entity creation"
  createdTimestamp: BigInt!
  "Timestamp of the last time this entity was updated"
  lastUpdateTimestamp: BigInt!
  "Block number of the last time this entity was updated"
  lastUpdateBlockNumber: BigInt!
}

type BeanstalkDailySnapshot @entity {
  "{Beanstalk ID}-{Unix day}"
  id: ID!

  "Unix day (int)"
  day: Int!

  "Season"
  season: Season!

  "Beanstalk Wells"
  wells: [Well!]!

  "The sum of all liquidity in USD all wells."
  totalLiquidityUSD: BigDecimal!
  "Delta of totalLiquidityUSD"
  deltaLiquidityUSD: BigDecimal!

  "All trade volume occurred, in USD. This includes any net trading activity as a result of add/remove liquidity."
  cumulativeTradeVolumeUSD: BigDecimal!
  "Delta of cumulativeTradeVolumeUSD"
  deltaTradeVolumeUSD: BigDecimal!

  "All bean buying volume, including converts."
  cumulativeBuyVolumeUSD: BigDecimal!
  "Delta of cumulativeBuyVolumeUSD"
  deltaBuyVolumeUSD: BigDecimal!

  "All bean selling volume, including converts."
  cumulativeSellVolumeUSD: BigDecimal!
  "Delta of cumulativeSellVolumeUSD"
  deltaSellVolumeUSD: BigDecimal!

  "All transfer volume occurred, in USD. This includes the full value of tokens transferred in add/remove liquidity."
  cumulativeTransferVolumeUSD: BigDecimal!
  "Delta of cumulativeTransferVolumeUSD"
  deltaTransferVolumeUSD: BigDecimal!

  "All bidirectional convert trading volume, in USD. Includes LP->LP converts which are neither up nor down."
  cumulativeConvertVolumeUSD: BigDecimal!
  "Delta of cumulativeConvertVolumeUSD"
  deltaConvertVolumeUSD: BigDecimal!

  "All upconvert convert trading volume, in USD."
  cumulativeConvertUpVolumeUSD: BigDecimal!
  "Delta of cumulativeConvertUpVolumeUSD"
  deltaConvertUpVolumeUSD: BigDecimal!

  "All downconvert convert trading volume, in USD."
  cumulativeConvertDownVolumeUSD: BigDecimal!
  "Delta of cumulativeConvertDownVolumeUSD"
  deltaConvertDownVolumeUSD: BigDecimal!

  "All LP->LP convert trading volume, in USD. Counts values from both Well interactions. A LP->LP convert is defined as a remove liquidity in one Well and add liquidity in another Well. Does not include L2L or AL2L converts which have no Well trading activity."
  cumulativeConvertNeutralTradeVolumeUSD: BigDecimal!
  "Delta of cumulativeConvertNeutralTradeVolumeUSD"
  deltaConvertNeutralTradeVolumeUSD: BigDecimal!

  "All LP->LP convert transfer volume, in USD. Does NOT double count values from both well interactions. A LP->LP convert is defined as a remove liquidity in one Well and add liquidity in another Well. Does not include L2L or AL2L converts which have no Well trading activity."
  cumulativeConvertNeutralTransferVolumeUSD: BigDecimal!
  "Delta of cumulativeConvertNeutralTransferVolumeUSD"
  deltaConvertNeutralTransferVolumeUSD: BigDecimal!

  "Timestamp of entity creation"
  createdTimestamp: BigInt!
  "Timestamp of the last time this entity was updated"
  lastUpdateTimestamp: BigInt!
  "Block number of the last time this entity was updated"
  lastUpdateBlockNumber: BigInt!
}

type Well @entity {
  "Well address. For upgradeable wells, this is the proxy address."
  id: Bytes!

  "The bored well address. Differs from `id` in the case of an Upgradeable well."
  boredWell: Bytes!

  "The aquifer used to bore this well"
  aquifer: Aquifer!

  "The well implementation used to deploy this well"
  implementation: Implementation!

  "Pumps associated with this well"
  pumps: [Pump!]!

  "Data to be passed to each pump"
  pumpData: [Bytes!]!

  "Pricing function contract used with this well"
  wellFunction: WellFunction!

  "Data to be passed to the well function"
  wellFunctionData: Bytes!

  "Name of liquidity well (e.g. Curve.fi DAI/USDC/USDT) "
  name: String

  "Symbol of liquidity well (e.g. 3CRV) "
  symbol: String

  "Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC well. Array to account for multi-asset wells like Curve and Balancer"
  tokens: [Token!]!

  "The order of the tokens in the Well. The above `tokens` association will be sorted by id on any retrieval."
  tokenOrder: [Bytes!]!

  "History of upgrades (for upgradeable wells). All wells will have at least one entry here."
  upgradeHistory: [WellUpgradeHistory!]! @derivedFrom(field: "well")

  "True if this is a Beanstalk well"
  isBeanstalk: Boolean!

  ##### Quantitative Data #####

  "Total liquidity token supply for the well."
  lpTokenSupply: BigInt!

  "The sum of all active and non-active liquidity in USD for this well."
  totalLiquidityUSD: BigDecimal!

  "The current amount of each token needed to exchange for one of the other token, with token decimal precision applied. Resulting decimal value may have more digits than is possible to represent tokens on chain. This is necessary to calculate proper prices for highly expensive tokens like btc."
  tokenRates: [BigDecimal!]!

  "Amount of each token in the well. The ordering should be the same as the well's `tokens` field."
  reserves: [BigInt!]!

  "USD value of each token in the well. The ordering should be the same as the well's `tokens` field."
  reservesUSD: [BigDecimal!]!

  "All trade volume occurred for a specific token, in native amount. Volume for an individual token is defined as a purchase of that token. This includes any net trading activity as a result of add/remove liquidity. The ordering should be the same as the well's `tokens` field."
  cumulativeTradeVolumeReserves: [BigInt!]!
  "Rolling 24h of cumulativeTradeVolumeReserves"
  rollingDailyTradeVolumeReserves: [BigInt!]!
  "Rolling 7d of cumulativeTradeVolumeReserves"
  rollingWeeklyTradeVolumeReserves: [BigInt!]!

  "All trade volume occurred for a specific token, in USD. Volume for an individual token is defined as a purchase of that token. This includes any net trading activity as a result of add/remove liquidity. The ordering should be the same as the well's `tokens` field."
  cumulativeTradeVolumeReservesUSD: [BigDecimal!]!
  "Rolling 24h of cumulativeTradeVolumeReservesUSD"
  rollingDailyTradeVolumeReservesUSD: [BigDecimal!]!
  "Rolling 7d of cumulativeTradeVolumeReservesUSD"
  rollingWeeklyTradeVolumeReservesUSD: [BigDecimal!]!

  "All trade volume occurred in this well, in USD. This includes any net trading activity as a result of add/remove liquidity. Should be equal to the sum of all entries in cumulativeTradeVolumeReservesUSD"
  cumulativeTradeVolumeUSD: BigDecimal!
  "Rolling 24h of cumulativeTradeVolumeUSD"
  rollingDailyTradeVolumeUSD: BigDecimal!
  "Rolling 7d of cumulativeTradeVolumeUSD"
  rollingWeeklyTradeVolumeUSD: BigDecimal!

  "All trade volume occurred for a specific token, in native amount. This includes absolute tokens on both sides of the trade unlike cumulativeTradeVolumeReserves. This includes any net trading activity as a result of add/remove liquidity. The ordering should be the same as the well's `tokens` field."
  cumulativeBiTradeVolumeReserves: [BigInt!]!
  "Rolling 24h of cumulativeBiTradeVolumeReserves"
  rollingDailyBiTradeVolumeReserves: [BigInt!]!
  "Rolling 7d of cumulativeBiTradeVolumeReserves"
  rollingWeeklyBiTradeVolumeReserves: [BigInt!]!

  "All transfer volume occurred for a specific token, in native amount. This includes the full amount of tokens transferred in add/remove liquidity. The ordering should be the same as the well's `tokens` field."
  cumulativeTransferVolumeReserves: [BigInt!]!
  "Rolling 24h of cumulativeTransferVolumeReserves"
  rollingDailyTransferVolumeReserves: [BigInt!]!
  "Rolling 7d of cumulativeTransferVolumeReserves"
  rollingWeeklyTransferVolumeReserves: [BigInt!]!

  "All transfer volume occurred for a specific token, in USD. This includes the full value of tokens transferred in add/remove liquidity. The ordering should be the same as the well's `tokens` field."
  cumulativeTransferVolumeReservesUSD: [BigDecimal!]!
  "Rolling 24h of cumulativeTransferVolumeReservesUSD"
  rollingDailyTransferVolumeReservesUSD: [BigDecimal!]!
  "Rolling 7d of cumulativeTransferVolumeReservesUSD"
  rollingWeeklyTransferVolumeReservesUSD: [BigDecimal!]!

  "All transfer volume occurred in this well, in USD. This includes the full value of tokens transferred in add/remove liquidity. Should be equal to the sum of all entries in cumulativeTransferVolumeReservesUSD"
  cumulativeTransferVolumeUSD: BigDecimal!
  "Rolling 24h of cumulativeTransferVolumeUSD"
  rollingDailyTransferVolumeUSD: BigDecimal!
  "Rolling 7d of cumulativeTransferVolumeUSD"
  rollingWeeklyTransferVolumeUSD: BigDecimal!

  "All Beanstalk convert trading volume occurring in this Well, by each token, in native amount. A subset of cumulativeTradeVolumeReserves"
  convertVolumeReserves: [BigInt!]!
  "Rolling 24h of convertVolumeReserves"
  rollingDailyConvertVolumeReserves: [BigInt!]!
  "Rolling 7d of convertVolumeReserves"
  rollingWeeklyConvertVolumeReserves: [BigInt!]!

  "All Beanstalk convert trading volume occurring in this Well, by each token, in USD.  A subset of cumulativeTradeVolumeReservesUSD"
  convertVolumeReservesUSD: [BigDecimal!]!
  "Rolling 24h of convertVolumeReservesUSD"
  rollingDailyConvertVolumeReservesUSD: [BigDecimal!]!
  "Rolling 7d of convertVolumeReservesUSD"
  rollingWeeklyConvertVolumeReservesUSD: [BigDecimal!]!

  "All Beanstalk convert trading volume occurring in this Well. A subset of cumulativeTradeVolumeUSD"
  convertVolumeUSD: BigDecimal!
  "Rolling 24h of convertVolumeUSD"
  rollingDailyConvertVolumeUSD: BigDecimal!
  "Rolling 7d of convertVolumeUSD"
  rollingWeeklyConvertVolumeUSD: BigDecimal!

  "Hour when the previous hourly snapshot was taken/updated"
  lastHourlySnapshotHour: Int
  "Day of when the previous daily snapshot was taken/updated"
  lastDailySnapshotDay: Int

  "Timestamp of entity creation"
  createdTimestamp: BigInt!
  "Timestamp of the last time this entity was updated"
  lastUpdateTimestamp: BigInt!
  "Block number of the last time this entity was updated"
  lastUpdateBlockNumber: BigInt!

  ##### Relations #####

  hourlySnapshots: [WellHourlySnapshot!]! @derivedFrom(field: "well")
  dailySnapshots: [WellDailySnapshot!]! @derivedFrom(field: "well")

  "All trade (add/remove liquidity, swaps) events occurred in this well"
  trades: [Trade!]! @derivedFrom(field: "well")
}

type WellHourlySnapshot @entity {
  "{Smart contract address of the well}-{Unix hour} "
  id: ID!

  "Beanstalk season (if this is a Beanstalk Well)"
  season: Season

  "Unix hour"
  hour: Int!

  "The well this snapshot belongs to"
  well: Well!

  ##### Cumulative Data #####

  "Total liquidity token supply for the well."
  lpTokenSupply: BigInt!
  "Delta of lpTokenSupply"
  deltaLpTokenSupply: BigInt!

  "The sum of all active and non-active liquidity in USD for this well."
  totalLiquidityUSD: BigDecimal!
  "Delta of totalLiquidityUSD"
  deltaLiquidityUSD: BigDecimal!

  "The current amount of each token needed to exchange for one of the other token, with token decimal precision applied. Resulting decimal value may have more digits than is possible to represent tokens on chain. This is necessary to calculate proper prices for highly expensive tokens like btc."
  tokenRates: [BigDecimal!]!
  "Delta of tokenRates"
  deltaTokenRates: [BigDecimal!]!

  "All trade volume occurred for a specific token, in native amount. Volume for an individual token is defined as a purchase of that token. This includes any net trading activity as a result of add/remove liquidity. The ordering should be the same as the well's `tokens` field."
  cumulativeTradeVolumeReserves: [BigInt!]!
  "Delta of cumulativeTradeVolumeReserves"
  deltaTradeVolumeReserves: [BigInt!]!

  "All trade volume occurred for a specific token, in USD. Volume for an individual token is defined as a purchase of that token. This includes any net trading activity as a result of add/remove liquidity. The ordering should be the same as the well's `tokens` field."
  cumulativeTradeVolumeReservesUSD: [BigDecimal!]!
  "Delta of cumulativeTradeVolumeReservesUSD"
  deltaTradeVolumeReservesUSD: [BigDecimal!]!

  "All trade volume occurred in this well, in USD. This includes any net trading activity as a result of add/remove liquidity. Should be equal to the sum of all entries in cumulativeTradeVolumeReservesUSD"
  cumulativeTradeVolumeUSD: BigDecimal!
  "Delta of cumulativeTradeVolumeUSD"
  deltaTradeVolumeUSD: BigDecimal!

  "All trade volume occurred for a specific token, in native amount. This includes absolute tokens on both sides of the trade unlike cumulativeTradeVolumeReserves. This includes any net trading activity as a result of add/remove liquidity. The ordering should be the same as the well's `tokens` field."
  cumulativeBiTradeVolumeReserves: [BigInt!]!
  "Delta of cumulativeBiTradeVolumeReserves"
  deltaBiTradeVolumeReserves: [BigInt!]!

  "All transfer volume occurred for a specific token, in native amount. This includes the full amount of tokens transferred in add/remove liquidity. The ordering should be the same as the well's `tokens` field."
  cumulativeTransferVolumeReserves: [BigInt!]!
  "Delta of cumulativeTransferVolumeReserves"
  deltaTransferVolumeReserves: [BigInt!]!

  "All transfer volume occurred for a specific token, in USD. This includes the full value of tokens transferred in add/remove liquidity. The ordering should be the same as the well's `tokens` field."
  cumulativeTransferVolumeReservesUSD: [BigDecimal!]!
  "Delta of cumulativeTransferVolumeReservesUSD"
  deltaTransferVolumeReservesUSD: [BigDecimal!]!

  "All transfer volume occurred in this well, in USD. This includes the full value of tokens transferred in add/remove liquidity. Should be equal to the sum of all entries in cumulativeTransferVolumeReservesUSD"
  cumulativeTransferVolumeUSD: BigDecimal!
  "Delta of cumulativeTransferVolumeUSD"
  deltaTransferVolumeUSD: BigDecimal!

  "All Beanstalk convert trading volume occurring in this Well, by each token, in native amount. A subset of cumulativeTradeVolumeReserves"
  convertVolumeReserves: [BigInt!]!
  "Delta of convertVolumeReserves"
  deltaConvertVolumeReserves: [BigInt!]!

  "All Beanstalk convert trading volume occurring in this Well, by each token, in USD.  A subset of cumulativeTradeVolumeReservesUSD"
  convertVolumeReservesUSD: [BigDecimal!]!
  "Delta of convertVolumeReservesUSD"
  deltaConvertVolumeReservesUSD: [BigDecimal!]!

  "All Beanstalk convert trading volume occurring in this Well. A subset of cumulativeTradeVolumeUSD"
  convertVolumeUSD: BigDecimal!
  "Delta of convertVolumeUSD"
  deltaConvertVolumeUSD: BigDecimal!

  "Timestamp of entity creation"
  createdTimestamp: BigInt!
  "Timestamp of the last time this entity was updated"
  lastUpdateTimestamp: BigInt!
  "Block number of the last time this entity was updated"
  lastUpdateBlockNumber: BigInt!
}

type WellDailySnapshot @entity {
  "{Smart contract address of the well}-{Unix day}"
  id: ID!

  "Unix day"
  day: Int!

  "Beanstalk season (if this is a Beanstalk Well)"
  season: Season

  "The well this snapshot belongs to"
  well: Well!

  ##### Cumulative Data #####

  "Total liquidity token supply for the well."
  lpTokenSupply: BigInt!
  "Delta of lpTokenSupply"
  deltaLpTokenSupply: BigInt!

  "The sum of all active and non-active liquidity in USD for this well."
  totalLiquidityUSD: BigDecimal!
  "Delta of totalLiquidityUSD"
  deltaLiquidityUSD: BigDecimal!

  "The current amount of each token needed to exchange for one of the other token, with token decimal precision applied. Resulting decimal value may have more digits than is possible to represent tokens on chain. This is necessary to calculate proper prices for highly expensive tokens like btc."
  tokenRates: [BigDecimal!]!
  "Delta of tokenRates"
  deltaTokenRates: [BigDecimal!]!

  "All trade volume occurred for a specific token, in native amount. Volume for an individual token is defined as a purchase of that token. This includes any net trading activity as a result of add/remove liquidity. The ordering should be the same as the well's `tokens` field."
  cumulativeTradeVolumeReserves: [BigInt!]!
  "Delta of cumulativeTradeVolumeReserves"
  deltaTradeVolumeReserves: [BigInt!]!

  "All trade volume occurred for a specific token, in USD. Volume for an individual token is defined as a purchase of that token. This includes any net trading activity as a result of add/remove liquidity. The ordering should be the same as the well's `tokens` field."
  cumulativeTradeVolumeReservesUSD: [BigDecimal!]!
  "Delta of cumulativeTradeVolumeReservesUSD"
  deltaTradeVolumeReservesUSD: [BigDecimal!]!

  "All trade volume occurred in this well, in USD. This includes any net trading activity as a result of add/remove liquidity. Should be equal to the sum of all entries in cumulativeTradeVolumeReservesUSD"
  cumulativeTradeVolumeUSD: BigDecimal!
  "Delta of cumulativeTradeVolumeUSD"
  deltaTradeVolumeUSD: BigDecimal!

  "All trade volume occurred for a specific token, in native amount. This includes absolute tokens on both sides of the trade unlike cumulativeTradeVolumeReserves. This includes any net trading activity as a result of add/remove liquidity. The ordering should be the same as the well's `tokens` field."
  cumulativeBiTradeVolumeReserves: [BigInt!]!
  "Delta of cumulativeBiTradeVolumeReserves"
  deltaBiTradeVolumeReserves: [BigInt!]!

  "All transfer volume occurred for a specific token, in native amount. This includes the full amount of tokens transferred in add/remove liquidity. The ordering should be the same as the well's `tokens` field."
  cumulativeTransferVolumeReserves: [BigInt!]!
  "Delta of cumulativeTransferVolumeReserves"
  deltaTransferVolumeReserves: [BigInt!]!

  "All transfer volume occurred for a specific token, in USD. This includes the full value of tokens transferred in add/remove liquidity. The ordering should be the same as the well's `tokens` field."
  cumulativeTransferVolumeReservesUSD: [BigDecimal!]!
  "Delta of cumulativeTransferVolumeReservesUSD"
  deltaTransferVolumeReservesUSD: [BigDecimal!]!

  "All transfer volume occurred in this well, in USD. This includes the full value of tokens transferred in add/remove liquidity. Should be equal to the sum of all entries in cumulativeTransferVolumeReservesUSD"
  cumulativeTransferVolumeUSD: BigDecimal!
  "Delta of cumulativeTransferVolumeUSD"
  deltaTransferVolumeUSD: BigDecimal!

  "All Beanstalk convert trading volume occurring in this Well, by each token, in native amount. A subset of cumulativeTradeVolumeReserves"
  convertVolumeReserves: [BigInt!]!
  "Delta of convertVolumeReserves"
  deltaConvertVolumeReserves: [BigInt!]!

  "All Beanstalk convert trading volume occurring in this Well, by each token, in USD.  A subset of cumulativeTradeVolumeReservesUSD"
  convertVolumeReservesUSD: [BigDecimal!]!
  "Delta of convertVolumeReservesUSD"
  deltaConvertVolumeReservesUSD: [BigDecimal!]!

  "All Beanstalk convert trading volume occurring in this Well. A subset of cumulativeTradeVolumeUSD"
  convertVolumeUSD: BigDecimal!
  "Delta of convertVolumeUSD"
  deltaConvertVolumeUSD: BigDecimal!

  "Timestamp of entity creation"
  createdTimestamp: BigInt!
  "Timestamp of the last time this entity was updated"
  lastUpdateTimestamp: BigInt!
  "Block number of the last time this entity was updated"
  lastUpdateBlockNumber: BigInt!
}

type Trade @entity {
  "{TradeType}-{Transaction hash}-{Well}-{LP token amount}(-{log index})? | The ID is constructed in this fashion to allow any subsequent event in the same transaction to identify this entity. (Adds log index if necessary to prevent collision)"
  id: ID!

  "Trade type discriminator"
  tradeType: TradeType!
  "Event type that was emitted"
  # TODO: consider replacing this with the emitted event name instead?
  eventType: TradeEventType!

  "The well this trade occurred in"
  well: Well!
  "Account that sent this transaction"
  account: Account!

  "[Add/Remove Liquidity] Amount of liquidity tokens minted/burned"
  liqLpTokens: BigInt
  "[Add/Remove Liquidity] Amount of input/output tokens"
  liqReserveTokens: [BigInt!]
  "[Add/Remove Liquidity] Boolean indicating whether this liquidity addition is a Beanstalk convert"
  isConvert: Boolean!

  "[Swap] Token sold into the well"
  swapFromToken: Token
  "[Swap] Amount of token sold into the well"
  swapAmountIn: BigInt
  "[Swap] Token bought from the well"
  swapToToken: Token
  "[Swap] Amount of the token bought from the well"
  swapAmountOut: BigInt

  "Well.reserves before this event"
  beforeReserves: [BigInt!]!
  "Well.reserves after this event"
  afterReserves: [BigInt!]!
  "Well.tokenRates before this event"
  beforeTokenRates: [BigDecimal!]!
  "Well.tokenRates before this event"
  afterTokenRates: [BigDecimal!]!

  "Trade volume for each token, in native amount, as a result of this event. The ordering should be the same as the well's `tokens` field."
  tradeVolumeReserves: [BigInt!]!
  "Trade volume for each token, in USD, as a result of this event. The ordering should be the same as the well's `tokens` field."
  tradeVolumeReservesUSD: [BigDecimal!]!
  "Trade volume in USD as a result of this event."
  tradeVolumeUSD: BigDecimal!
  "Same as tradeVolumeReserves, but further includes absolute tokens on both sides of the effective trade."
  biTradeVolumeReserves: [BigInt!]!

  "Transfer volume for each token, in native amount. The ordering should be the same as the well's `tokens` field."
  transferVolumeReserves: [BigInt!]!
  "Transfer volume for each token, in USD. The ordering should be the same as the well's `tokens` field."
  transferVolumeReservesUSD: [BigDecimal!]!
  "Transfer volume in USD as a result of this event."
  transferVolumeUSD: BigDecimal!

  "Transaction hash of the transaction that emitted this event"
  hash: Bytes!
  "Block number of this event"
  blockNumber: BigInt!
  "Event log index."
  logIndex: Int!
  "Timestamp of this event"
  timestamp: BigInt!
}
