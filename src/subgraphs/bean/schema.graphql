# This same entity schema is intended for use across the subgraphs
type Version @entity {
  "= 'subgraph'"
  id: ID!
  "= 'beanstalk'"
  subgraphName: String!
  "Verison number of the subgraph"
  versionNumber: String!
  "Address of Beanstalk protocol"
  protocolAddress: Bytes!
  "Which blockchain is being indexed, i.e. 'ethereum', 'arbitrum', etc."
  chain: String!
}

type Token @entity {
  "Smart contract address of the token"
  id: Bytes!

  "Name of the token"
  name: String!
  "Number of decimals"
  decimals: BigInt!

  "Total supply of this token. Isn't calculated for all tokens, in those cases will be zero."
  supply: BigInt!
  "Amount of tokens in individual wallets. Isn't calculated for all tokens, in those cases will be zero."
  walletBalance: BigInt!
  "Amount of tokens in farm balances. Isn't calculated for all tokens, in those cases will be zero."
  farmBalance: BigInt!
  "Amount of tokens in whitelisted LP pools. Isn't calculated for all tokens, in those cases will be zero."
  pooledBalance: BigInt!

  "Last USD price calculated. Isn't calculated for all tokens, in those cases will be zero."
  lastPriceUSD: BigDecimal!

  "Season when the previous hourly snapshot was taken/updated"
  lastHourlySnapshotSeason: Int
  "Day of when the previous daily snapshot was taken/updated"
  lastDailySnapshotDay: Int

  hourlySnapshots: [TokenHourlySnapshot!]! @derivedFrom(field: "token")
  dailySnapshots: [TokenDailySnapshot!]! @derivedFrom(field: "token")
}

type TokenHourlySnapshot @entity {
  "{Token address}-{Season}"
  id: ID!

  seasonNumber: Int!
  season: Season!
  token: Token!

  "Name of the token"
  name: String!
  "Number of decimals"
  decimals: BigInt!

  "Total supply of this token. Isn't calculated for all tokens, in those cases will be zero."
  supply: BigInt!
  "Amount of tokens in individual wallets. Isn't calculated for all tokens, in those cases will be zero."
  walletBalance: BigInt!
  "Amount of tokens in farm balances. Isn't calculated for all tokens, in those cases will be zero."
  farmBalance: BigInt!
  "Amount of tokens in whitelisted LP pools. Isn't calculated for all tokens, in those cases will be zero."
  pooledBalance: BigInt!

  "Last USD price calculated. Isn't calculated for all tokens, in those cases will be zero."
  lastPriceUSD: BigDecimal!

  "Delta of supply"
  deltaSupply: BigInt!
  "Delta of walletBalance"
  deltaWalletBalance: BigInt!
  "Delta of farmBalance"
  deltaFarmBalance: BigInt!
  "Delta of pooledBalance"
  deltaPooledBalance: BigInt!
  "Delta of lastPriceUSD"
  deltaLastPriceUSD: BigDecimal!
}

type TokenDailySnapshot @entity {
  "{Token address}-{Unix day}"
  id: ID!

  "Unix day"
  day: Int!
  season: Season!
  token: Token!

  "Name of the token"
  name: String!
  "Number of decimals"
  decimals: BigInt!

  "Total supply of this token. Isn't calculated for all tokens, in those cases will be zero."
  supply: BigInt!
  "Amount of tokens in individual wallets. Isn't calculated for all tokens, in those cases will be zero."
  walletBalance: BigInt!
  "Amount of tokens in farm balances. Isn't calculated for all tokens, in those cases will be zero."
  farmBalance: BigInt!
  "Amount of tokens in whitelisted LP pools. Isn't calculated for all tokens, in those cases will be zero."
  pooledBalance: BigInt!

  "Last USD price calculated. Isn't calculated for all tokens, in those cases will be zero."
  lastPriceUSD: BigDecimal!

  "Delta of supply"
  deltaSupply: BigInt!
  "Delta of walletBalance"
  deltaWalletBalance: BigInt!
  "Delta of farmBalance"
  deltaFarmBalance: BigInt!
  "Delta of pooledBalance"
  deltaPooledBalance: BigInt!
  "Delta of lastPriceUSD"
  deltaLastPriceUSD: BigDecimal!
}

type Season @entity {
  "Season number (string)"
  id: ID!
  "Season number (int)"
  season: Int!
  "Timestamp of the start of this season"
  timestamp: BigInt!

  # Snapshots
  beanHourlySnapshot: BeanHourlySnapshot! @derivedFrom(field: "season")
  beanDailySnapshot: BeanDailySnapshot! @derivedFrom(field: "season")
  poolHourlySnapshots: [PoolHourlySnapshot!]! @derivedFrom(field: "season")
  poolDailySnapshots: [PoolDailySnapshot!]! @derivedFrom(field: "season")
}

type Bean @entity {
  "Contract address of the Bean token"
  id: Bytes!

  "Current Beanstalk season"
  currentSeason: Season!
  "Current bean supply"
  supply: BigInt!

  "Whitelisted pools having Bean"
  pools: [Pool!]!
  "Dewhitelisted pools having Bean"
  dewhitelistedPools: [Pool!]!

  "* The last recorded bean price. Updated upon a trade, a peg cross, or sunrise. May not be useful for external use as accuracy is not guaranteed."
  lastPrice: BigDecimal!

  "Cumulative number of peg crosses"
  crosses: Int!
  "Last timestamp a peg cross occurred"
  lastCross: BigInt!
  "Peg cross references"
  crossEvents: [BeanCross!]! @derivedFrom(field: "bean")

  "Percent of supply in LP used for peg maintenance"
  supplyInPegLP: BigDecimal!

  "Season when the previous hourly snapshot was taken/updated"
  lastHourlySnapshotSeason: Int
  "Day of when the previous daily snapshot was taken/updated"
  lastDailySnapshotDay: Int

  hourlySnapshots: [BeanHourlySnapshot!]! @derivedFrom(field: "bean")
  dailySnapshots: [BeanDailySnapshot!]! @derivedFrom(field: "bean")

  "(DEPRECATED): Not relevant to Pinto. // Amount of the supply which is considered Locked Beans (untradeable due to chop rate)"
  lockedBeans: BigInt!

  "(DEPRECATED): See basin subgraph instead // Exchange volume in bean"
  volume: BigInt!

  "(DEPRECATED): See basin subgraph instead // Exchange volume in USD"
  volumeUSD: BigDecimal!

  "(DEPRECATED): See basin subgraph instead // Total liquidity trading against this Bean"
  liquidityUSD: BigDecimal!

  "Timestamp of entity creation"
  createdTimestamp: BigInt!
  "Timestamp of the last time this entity was updated"
  lastUpdateTimestamp: BigInt!
  "Block number of the last time this entity was updated"
  lastUpdateBlockNumber: BigInt!
}

type BeanHourlySnapshot @entity {
  "{Token address}-{Season}"
  id: ID!

  seasonNumber: Int!
  season: Season!
  bean: Bean!

  "Bean supply"
  supply: BigInt!
  "Market cap at the end of the previous season"
  marketCap: BigDecimal!

  "Bean price at the end of the previous season"
  instPrice: BigDecimal!
  "Time-Weighted bean price over the previous season"
  twaPrice: BigDecimal!

  "Time-Weighted cumulative bean USD liquidity over the previous season. Sum of the same property on individual pools"
  twaBeanLiquidityUSD: BigDecimal!
  "Time-Weighted cumulative non-bean USD liquidity over the previous season. Sum of the same property on individual pools"
  twaNonBeanLiquidityUSD: BigDecimal!
  "Time-Weighted cumulative total USD liquidity over the previous season. Sum of the same property on individual pools"
  twaLiquidityUSD: BigDecimal!

  "Sum of instantaneous deltaB across all whitelisted pools at the end of the previous season"
  instDeltaB: BigDecimal!
  "Sum of time-weighted deltaB across all whitelisted pools over the previous season"
  twaDeltaB: BigDecimal!

  "Cumulative number of peg crosses"
  crosses: Int!
  "Delta of crosses"
  deltaCrosses: Int!
  "All crosses occurred in the same time period as this snapshot"
  crossEvents: [BeanCross!]! @derivedFrom(field: "beanHourlySnapshot")

  "Percent of bean supply in LP pools [0-1]"
  supplyInPegLP: BigDecimal!
  "The L2SR at the end of the previous season. [0-1]"
  l2sr: BigDecimal!

  "(DEPRECATED): Not relevant to Pinto. // Amount of the supply which is considered Locked Beans (untradeable due to chop rate)"
  lockedBeans: BigInt!

  "(DEPRECATED): See basin subgraph instead // Exchange volume in bean"
  volume: BigInt!
  "(DEPRECATED): See basin subgraph instead // Delta of volume"
  deltaVolume: BigInt!

  "(DEPRECATED): See basin subgraph instead // Exchange volume in USD"
  volumeUSD: BigDecimal!
  "(DEPRECATED): See basin subgraph instead // Delta of volumeUSD"
  deltaVolumeUSD: BigDecimal!

  "(DEPRECATED): See basin subgraph instead // Total liquidity trading against this Bean"
  liquidityUSD: BigDecimal!
  "(DEPRECATED): See basin subgraph instead // Delta of liquidityUSD"
  deltaLiquidityUSD: BigDecimal!

  "Timestamp of entity creation"
  createdTimestamp: BigInt!
  "Timestamp of the last time this entity was updated"
  lastUpdateTimestamp: BigInt!
  "Block number of the last time this entity was updated"
  lastUpdateBlockNumber: BigInt!
}

type BeanDailySnapshot @entity {
  "{Token address}-{Unix day}"
  id: ID!

  "Unix day"
  day: Int!

  season: Season!
  bean: Bean!

  "Bean supply"
  supply: BigInt!
  "Market cap at the end of the previous season"
  marketCap: BigDecimal!

  "Bean price at the end of the previous season"
  instPrice: BigDecimal!
  "Time-Weighted bean price over the previous season"
  twaPrice: BigDecimal!

  "Time-Weighted cumulative bean USD liquidity over the previous season. Sum of the same property on individual pools"
  twaBeanLiquidityUSD: BigDecimal!
  "Time-Weighted cumulative non-bean USD liquidity over the previous season. Sum of the same property on individual pools"
  twaNonBeanLiquidityUSD: BigDecimal!
  "Time-Weighted cumulative total USD liquidity over the previous season. Sum of the same property on individual pools"
  twaLiquidityUSD: BigDecimal!

  "Sum of instantaneous deltaB across all whitelisted pools at the end of the previous season"
  instDeltaB: BigDecimal!
  "Sum of time-weighted deltaB across all whitelisted pools over the previous season"
  twaDeltaB: BigDecimal!

  "Cumulative number of peg crosses"
  crosses: Int!
  "Delta of crosses"
  deltaCrosses: Int!
  "All crosses occurred in the same time period as this snapshot"
  crossEvents: [BeanCross!]! @derivedFrom(field: "beanDailySnapshot")

  "Percent of supply in LP used for peg maintenance"
  supplyInPegLP: BigDecimal!
  "The L2SR at the end of the previous season. [0-1]"
  l2sr: BigDecimal!

  "(DEPRECATED): Not relevant to Pinto. // Amount of the supply which is considered Locked Beans (untradeable due to chop rate)"
  lockedBeans: BigInt!

  "(DEPRECATED): See basin subgraph instead // Exchange volume in bean"
  volume: BigInt!
  "(DEPRECATED): See basin subgraph instead // Delta of volume"
  deltaVolume: BigInt!

  "(DEPRECATED): See basin subgraph instead // Exchange volume in USD"
  volumeUSD: BigDecimal!
  "(DEPRECATED): See basin subgraph instead // Delta of volumeUSD"
  deltaVolumeUSD: BigDecimal!

  "(DEPRECATED): See basin subgraph instead // Total liquidity trading against this Bean"
  liquidityUSD: BigDecimal!
  "(DEPRECATED): See basin subgraph instead // Delta of liquidityUSD"
  deltaLiquidityUSD: BigDecimal!

  "Timestamp of entity creation"
  createdTimestamp: BigInt!
  "Timestamp of the last time this entity was updated"
  lastUpdateTimestamp: BigInt!
  "Block number of the last time this entity was updated"
  lastUpdateBlockNumber: BigInt!
}

type Pool @entity {
  "Pool contract address"
  id: Bytes!

  "Current Beanstalk season"
  currentSeason: Season!
  "The Bean token that is in this pool"
  bean: Bean!
  "Tokens in this pool"
  tokens: [Token!]!

  "Token reserves in the pool"
  reserves: [BigInt!]!
  "* The last recorded bean price in this pool. Updated upon a trade, a peg cross, or sunrise. May not be useful for external use as accuracy is not guaranteed."
  lastPrice: BigDecimal!

  "Cumulative number of peg crosses in this Pool"
  crosses: Int!
  "Last timestamp a peg cross occurred"
  lastCross: BigInt!
  "Peg cross references"
  crossEvents: [PoolCross!]! @derivedFrom(field: "pool")

  "Season when the previous hourly snapshot was taken/updated"
  lastHourlySnapshotSeason: Int
  "Day of when the previous daily snapshot was taken/updated"
  lastDailySnapshotDay: Int

  hourlySnapshots: [PoolHourlySnapshot!]! @derivedFrom(field: "pool")
  dailySnapshots: [PoolDailySnapshot!]! @derivedFrom(field: "pool")

  "(DEPRECATED): See basin subgraph instead // Pool exchange volume in bean"
  volume: BigInt!
  "(DEPRECATED): See basin subgraph instead // Pool exchange volume in USD"
  volumeUSD: BigDecimal!
  "(DEPRECATED): See basin subgraph instead // Total liquidity in this pool"
  liquidityUSD: BigDecimal!

  "Timestamp of entity creation"
  createdTimestamp: BigInt!
  "Timestamp of the last time this entity was updated"
  lastUpdateTimestamp: BigInt!
  "Block number of the last time this entity was updated"
  lastUpdateBlockNumber: BigInt!
}

type PoolHourlySnapshot @entity {
  "{Token address}-{Season}"
  id: ID!

  seasonNumber: Int!
  season: Season!
  pool: Pool!

  "Token reserves in the pool"
  reserves: [BigInt!]!
  "Delta of reserves"
  deltaReserves: [BigInt!]!
  "Time-Weighted average reserves in this pool over the previous season"
  twaReserves: [BigInt!]!

  "Time-Weighted average bean USD liquidity in this pool over the previous season, using the price of bean in this pool only"
  twaBeanLiquidityUSD: BigDecimal!
  "Time-Weighted average non-bean USD liquidity in this pool over the previous season"
  twaNonBeanLiquidityUSD: BigDecimal!
  "Time-Weighted average total USD liquidity in this pool over the previous season"
  twaLiquidityUSD: BigDecimal!

  "Bean price in this pool at the end of the previous season"
  instPrice: BigDecimal!
  "Time-Weighted bean price in this pool over the previous season"
  twaPrice: BigDecimal!
  "Time-Weighted price of the non-bean token in the pool over the previous season"
  twaToken2Price: BigDecimal!

  "Cumulative number of peg crosses in this Pool"
  crosses: Int!
  "Delta of crosses"
  deltaCrosses: Int!

  "Instantaneous deltaB at the start of the season"
  instDeltaB: BigDecimal!
  "Time-Weighted deltaB over the previous season"
  twaDeltaB: BigDecimal!

  "All crosses occurred in the same time period as this snapshot"
  crossEvents: [PoolCross!]! @derivedFrom(field: "poolHourlySnapshot")

  "(DEPRECATED): See basin subgraph instead // Pool exchange volume in bean"
  volume: BigInt!
  "(DEPRECATED): See basin subgraph instead // Delta of volume"
  deltaVolume: BigInt!

  "(DEPRECATED): See basin subgraph instead // Pool exchange volume in USD"
  volumeUSD: BigDecimal!
  "(DEPRECATED): See basin subgraph instead // Delta of volumeUSD"
  deltaVolumeUSD: BigDecimal!

  "(DEPRECATED): See basin subgraph instead // Total liquidity in this pool"
  liquidityUSD: BigDecimal!
  "(DEPRECATED): See basin subgraph instead // Delta of liquidityUSD"
  deltaLiquidityUSD: BigDecimal!

  "Timestamp of entity creation"
  createdTimestamp: BigInt!
  "Timestamp of the last time this entity was updated"
  lastUpdateTimestamp: BigInt!
  "Block number of the last time this entity was updated"
  lastUpdateBlockNumber: BigInt!
}

type PoolDailySnapshot @entity {
  "{Token address}-{Unix day}"
  id: ID!

  "Unix day"
  day: Int!

  season: Season!
  pool: Pool!

  "Token reserves in the pool"
  reserves: [BigInt!]!
  "Delta of reserves"
  deltaReserves: [BigInt!]!
  "Time-Weighted average reserves in this pool over the previous season"
  twaReserves: [BigInt!]!

  "Time-Weighted average bean USD liquidity in this pool over the previous season, using the price of bean in this pool only"
  twaBeanLiquidityUSD: BigDecimal!
  "Time-Weighted average non-bean USD liquidity in this pool over the previous season"
  twaNonBeanLiquidityUSD: BigDecimal!
  "Time-Weighted average total USD liquidity in this pool over the previous season"
  twaLiquidityUSD: BigDecimal!

  "Bean price in this pool at the end of the previous season"
  instPrice: BigDecimal!
  "Time-Weighted bean price in this pool over the previous season"
  twaPrice: BigDecimal!
  "Time-Weighted price of the non-bean token in the pool over the previous season"
  twaToken2Price: BigDecimal!

  "Cumulative number of peg crosses in this Pool"
  crosses: Int!
  "Delta of crosses"
  deltaCrosses: Int!

  "Instantaneous deltaB at the start of the season"
  instDeltaB: BigDecimal!
  "Time-Weighted deltaB over the previous season"
  twaDeltaB: BigDecimal!

  "All crosses occurred in the same time period as this snapshot"
  crossEvents: [PoolCross!]! @derivedFrom(field: "poolDailySnapshot")

  "(DEPRECATED): See basin subgraph instead // Pool exchange volume in bean"
  volume: BigInt!
  "(DEPRECATED): See basin subgraph instead // Delta of volume"
  deltaVolume: BigInt!

  "(DEPRECATED): See basin subgraph instead // Pool exchange volume in USD"
  volumeUSD: BigDecimal!
  "(DEPRECATED): See basin subgraph instead // Delta of volumeUSD"
  deltaVolumeUSD: BigDecimal!

  "(DEPRECATED): See basin subgraph instead // Total liquidity in this pool"
  liquidityUSD: BigDecimal!
  "(DEPRECATED): See basin subgraph instead // Delta of liquidityUSD"
  deltaLiquidityUSD: BigDecimal!

  "Timestamp of entity creation"
  createdTimestamp: BigInt!
  "Timestamp of the last time this entity was updated"
  lastUpdateTimestamp: BigInt!
  "Block number of the last time this entity was updated"
  lastUpdateBlockNumber: BigInt!
}

type BeanCross @entity {
  "Cross number (string)"
  id: ID!
  "Cross number (int)"
  cross: Int!

  "The Bean for which this cross occurred"
  bean: Bean!

  "Whether this cross was above or below peg"
  above: Boolean!

  "The price of bean at the time this cross occurred"
  price: BigDecimal!

  "Time elapsed since the previous cross"
  timeSinceLastCross: BigInt!

  "Timestamp when this cross was identified"
  timestamp: BigInt!
  "Block number when this cross was identified"
  blockNumber: BigInt!

  "Hourly snapshot for this cross"
  beanHourlySnapshot: BeanHourlySnapshot!
  "Daily snapshot for this cross"
  beanDailySnapshot: BeanDailySnapshot!
}

type PoolCross @entity {
  "{Pool Address}-{Cross Number}"
  id: ID!
  "Cross number (int)"
  cross: Int!
  "The Pool in which this cross occurred"
  pool: Pool!

  "Whether this cross was above or below peg"
  above: Boolean!

  "The price of bean in this pool at the time this cross occurred"
  price: BigDecimal!

  "Time elapsed since the previous cross in this pool"
  timeSinceLastCross: BigInt!

  "Timestamp when this cross was identified"
  timestamp: BigInt!
  "Block number when this cross was identified"
  blockNumber: BigInt!

  "Hourly snapshot for this cross"
  poolHourlySnapshot: PoolHourlySnapshot!
  "Daily snapshot for this cross"
  poolDailySnapshot: PoolDailySnapshot!
}

# For tracking twa balances as the seasons progress
type TwaOracle @entity {
  "NOTICE! This entity is intended for internal use, and is intentionally not documented or even useful in the graphql interface."
  id: Bytes!
  pool: Pool!
  # These two fields are used to determine twa over the previous season.
  # priceCumulativeSun is the value of priceCumulativeLast at the time of the previous sunrise (lastSun)
  priceCumulativeSun: [BigInt!]!
  lastSun: BigInt!
  # These three fields are for when manual calculation of price cumulative last is required (beanlusd, wells)
  # Otherwise the equivalent values are derived from the corresponding contract functions.
  priceCumulativeLast: [BigInt!]!
  lastBalances: [BigInt!]!
  lastUpdated: BigInt!
  # These fields are for saving the raw Well reserves outputted by the WellOracle event
  # The previous two seasons are needed because in the same block as a new season starts, the newest value cannot be used.
  cumulativeWellReserves: Bytes!
  cumulativeWellReservesTime: BigInt!
  cumulativeWellReservesBlock: BigInt!
  cumulativeWellReservesPrev: Bytes!
  cumulativeWellReservesPrevTime: BigInt!
  cumulativeWellReservesPrevBlock: BigInt!
}
