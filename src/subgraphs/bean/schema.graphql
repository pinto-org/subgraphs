# This same entity schema is intended for use across the subgraphs
type Version @entity {
  "= 'subgraph'"
  id: ID!
  "= 'beanstalk'"
  subgraphName: String!
  "Verison number of the subgraph"
  versionNumber: String!
  "Address of Beanstalk protocol"
  protocolAddress: Bytes!
  "Which blockchain is being indexed, i.e. 'ethereum', 'arbitrum', etc."
  chain: String!
}

type Token @entity {
  "Smart contract address of the token"
  id: Bytes!

  "Name of the token, i.e. BEAN, WETH"
  name: String!

  "Number of decimals"
  decimals: BigInt!

  "Last USD price calculated. Isn't calculated for all tokens, in those cases will be zero."
  lastPriceUSD: BigDecimal!
}

type Season @entity {
  "Season number (string)"
  id: ID!
  "Season number (int)"
  season: Int!

  # Snapshots
  beanHourlySnapshots: BeanHourlySnapshot! @derivedFrom(field: "season")
  beanDailySnapshots: BeanDailySnapshot! @derivedFrom(field: "season")
  poolHourlySnapshots: [PoolHourlySnapshot!]! @derivedFrom(field: "season")
  poolDailySnapshots: [PoolDailySnapshot!]! @derivedFrom(field: "season")
}

type Bean @entity {
  "Contract address of the Bean token"
  id: Bytes!

  "Current supply"
  supply: BigInt!

  "Latest price seen"
  price: BigDecimal!

  "Current market cap"
  marketCap: BigDecimal!

  "Amount of the supply which is considered Locked Beans (untradeable due to chop rate)"
  lockedBeans: BigInt!

  "Percent of supply in LP used for peg maintenance"
  supplyInPegLP: BigDecimal!

  "Cumulative volume of beans traded"
  volume: BigInt!

  "Cumulative volume in USD value"
  volumeUSD: BigDecimal!

  "Current liquidity in USD value"
  liquidityUSD: BigDecimal!

  "Cumulative number of crosses"
  crosses: Int!

  "Peg crosses information"
  crossEvents: [BeanCross!]! @derivedFrom(field: "bean")

  "Last timestamp a cross was seen"
  lastCross: BigInt!

  "Last season seen from Beanstalk"
  lastSeason: Season!

  "Whitelisted pools having bean"
  pools: [Pool!]!

  "Dewhitelisted pools having bean"
  dewhitelistedPools: [Pool!]!

  hourlySnapshots: [BeanHourlySnapshot!]! @derivedFrom(field: "bean")
  dailySnapshots: [BeanDailySnapshot!]! @derivedFrom(field: "bean")
}

type BeanHourlySnapshot @entity {
  "{Token address}-{Season}"
  id: ID!

  season: Season!
  bean: Bean!
  supply: BigInt!
  marketCap: BigDecimal!

  "Amount of the supply which is considered Locked Beans (untradeable due to chop rate)"
  lockedBeans: BigInt!

  "Percent of supply in LP used for peg maintenance"
  supplyInPegLP: BigDecimal!

  "Instantaneous deltaB across all whitelisted pools"
  instantaneousDeltaB: BigInt!

  "Time-Weighted deltaB in whitelisted pools over the previous season"
  twaDeltaB: BigInt!

  "Cumulative volume in BEAN"
  volume: BigInt!

  "Cumulative volume in USD"
  volumeUSD: BigDecimal!

  "Current liquidity in USD"
  liquidityUSD: BigDecimal!

  "Current USD price"
  price: BigDecimal!

  "Time-Weighted price over the previous season"
  twaPrice: BigDecimal!

  "Cumulative number of crosses"
  crosses: Int!

  "Volume in BEAN for this snapshot"
  deltaVolume: BigInt!

  "Volume in USD for this snapshot"
  deltaVolumeUSD: BigDecimal!

  "Difference in liquidity for this snapshot"
  deltaLiquidityUSD: BigDecimal!

  "Crosses occuring in this snapshot"
  deltaCrosses: Int!

  "Detailed cross events during this snapshot"
  crossEvents: [BeanCross!]! @derivedFrom(field: "beanHourlySnapshot")

  "Timestamp this snapshot was updated"
  timestamp: BigInt!

  "Block number this snapshot was updated"
  blockNumber: BigInt!
}

type BeanDailySnapshot @entity {
  "{Token address}-{Unix day}"
  id: ID!

  season: Season!
  bean: Bean!
  supply: BigInt!
  marketCap: BigDecimal!

  "Amount of the supply which is considered Locked Beans (untradeable due to chop rate)"
  lockedBeans: BigInt!
  "Percent of supply in LP used for peg maintenance"
  supplyInPegLP: BigDecimal!
  "Instantaneous deltaB across all whitelisted pools"
  instantaneousDeltaB: BigInt!
  "Time-Weighted deltaB in whitelisted pools over the previous season"
  twaDeltaB: BigInt!
  volume: BigInt!
  volumeUSD: BigDecimal!
  liquidityUSD: BigDecimal!
  price: BigDecimal!
  "Time-Weighted price over the previous season"
  twaPrice: BigDecimal!
  crosses: Int!
  deltaVolume: BigInt!
  deltaVolumeUSD: BigDecimal!
  deltaLiquidityUSD: BigDecimal!
  deltaCrosses: Int!
  crossEvents: [BeanCross!]! @derivedFrom(field: "beanDailySnapshot")
  timestamp: BigInt!
  blockNumber: BigInt!
}

type Pool @entity {
  id: Bytes!
  "The Bean token that is in this pool"
  bean: Bean!
  "All tokens in this pool"
  tokens: [Token!]!
  reserves: [BigInt!]!
  lastSeason: Season!
  lastPrice: BigDecimal!
  volume: BigInt!
  volumeUSD: BigDecimal!
  liquidityUSD: BigDecimal!
  crosses: Int!
  "Last timestamp a cross was seen for this pool"
  lastCross: BigInt!
  crossEvents: [PoolCross!]! @derivedFrom(field: "pool")
  "Instantaneous deltaB"
  deltaBeans: BigInt!
  hourlySnapshots: [PoolHourlySnapshot!]! @derivedFrom(field: "pool")
  dailySnapshots: [PoolDailySnapshot!]! @derivedFrom(field: "pool")
}

type PoolHourlySnapshot @entity {
  id: ID!
  season: Season!
  pool: Pool!
  reserves: [BigInt!]!
  lastPrice: BigDecimal!
  "Time-Weighted bean price over the previous season"
  twaPrice: BigDecimal!
  "Time-Weighted price of the other token in the pool over the previous season, if applicable"
  twaToken2Price: BigDecimal
  volume: BigInt!
  volumeUSD: BigDecimal!
  liquidityUSD: BigDecimal!
  crosses: Int!
  utilization: BigDecimal!
  "Instantaneous deltaB"
  deltaBeans: BigInt!
  "Time-Weighted deltaB over the previous season"
  twaDeltaBeans: BigInt!
  deltaReserves: [BigInt!]!
  deltaVolume: BigInt!
  deltaVolumeUSD: BigDecimal!
  deltaLiquidityUSD: BigDecimal!
  deltaCrosses: Int!
  crossEvents: [PoolCross!]! @derivedFrom(field: "poolHourlySnapshot")
  createdAt: BigInt!
  updatedAt: BigInt!
}

type PoolDailySnapshot @entity {
  id: ID!
  season: Season!
  pool: Pool!
  reserves: [BigInt!]!
  lastPrice: BigDecimal!
  "Time-Weighted price over the previous season"
  twaPrice: BigDecimal!
  "Time-Weighted price of the other token in the pool over the previous season, if applicable"
  twaToken2Price: BigDecimal
  volume: BigInt!
  volumeUSD: BigDecimal!
  liquidityUSD: BigDecimal!
  crosses: Int!
  utilization: BigDecimal!
  "Instantaneous deltaB"
  deltaBeans: BigInt!
  "Time-Weighted deltaB over the previous season"
  twaDeltaBeans: BigInt!
  deltaReserves: [BigInt!]!
  deltaVolume: BigInt!
  deltaVolumeUSD: BigDecimal!
  deltaLiquidityUSD: BigDecimal!
  deltaCrosses: Int!
  crossEvents: [PoolCross!]! @derivedFrom(field: "poolDailySnapshot")
  createdAt: BigInt!
  updatedAt: BigInt!
}

type BeanCross @entity {
  id: ID!
  bean: Bean!
  price: BigDecimal!
  blockNumber: BigInt!
  timestamp: BigInt!
  timeSinceLastCross: BigInt!
  above: Boolean!

  beanHourlySnapshot: BeanHourlySnapshot!
  beanDailySnapshot: BeanDailySnapshot!
}

type PoolCross @entity {
  id: ID!
  pool: Pool!
  price: BigDecimal!
  blockNumber: BigInt!
  timestamp: BigInt!
  timeSinceLastCross: BigInt!
  above: Boolean!

  poolHourlySnapshot: PoolHourlySnapshot!
  poolDailySnapshot: PoolDailySnapshot!
}

# For tracking twa balances as the seasons progress
type TwaOracle @entity {
  id: Bytes!
  pool: Pool!
  # These two fields are used to determine twa over the previous season.
  # priceCumulativeSun is the value of priceCumulativeLast at the time of the previous sunrise (lastSun)
  priceCumulativeSun: [BigInt!]!
  lastSun: BigInt!
  # These three fields are for when manual calculation of price cumulative last is required (beanlusd, wells)
  # Otherwise the equivalent values are derived from the corresponding contract functions.
  priceCumulativeLast: [BigInt!]!
  lastBalances: [BigInt!]!
  lastUpdated: BigInt!
  # These fields are for saving the raw Well reserves outputted by the WellOracle event
  # The previous two seasons are needed because in the same block as a new season starts, the newest value cannot be used.
  cumulativeWellReserves: Bytes!
  cumulativeWellReservesTime: BigInt!
  cumulativeWellReservesBlock: BigInt!
  cumulativeWellReservesPrev: Bytes!
  cumulativeWellReservesPrevTime: BigInt!
  cumulativeWellReservesPrevBlock: BigInt!
}
